# -*- coding: utf-8 -*-
"""deploy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eW6fPRqfkW3sGh8WFPxzLXrPEcSqB9Xd
"""

import streamlit as st
import pickle
import numpy as np
import random
from PIL import Image

# Load the pickled Logistic Regression model
with open('DecisionTree.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

st.title('FINANCIAL HEALTH PREDICTION')
st.markdown("- prediction of bankruptcy")
st.image('bank.png', caption='Check if your company is going to bankrupt', use_column_width=True)

inputs = []
features = [
    'Feature 1', 'Feature 2', 'Feature 3', 'Feature 4', 'Feature 5', 'Feature 6', 'Feature 7', 'Feature 8', 'Feature 9',
    'Feature 10', 'Feature 11', 'Feature 12', 'Feature 13', 'Feature 14', 'Feature 15', 'Feature 16', 'Feature 17',
    'Feature 18', 'Feature 19', 'Feature 20', 'Feature 21', 'Feature 22', 'Feature 23', 'Feature 24', 'Feature 25',
    'Feature 26', 'Feature 27', 'Feature 28', 'Feature 29', 'Feature 30', 'Feature 31', 'Feature 32', 'Feature 33',
    'Feature 34', 'Feature 35', 'Feature 36', 'Feature 37', 'Feature 38', 'Feature 39', 'Feature 40', 'Feature 41',
    'Feature 42', 'Feature 43', 'Feature 44', 'Feature 45', 'Feature 46', 'Feature 47', 'Feature 48', 'Feature 49',
    'Feature 50', 'Feature 51'
]

# Create a layout with two columns for each input
for i in range(0, 51):  # 51 input fields
    left_column, right_column = st.columns(2)

    # Input label
    with left_column:
        st.write(f'{features[i]}:')

    # Input field for the generated random number between 0 and 1
    with right_column:
        random_value = st.number_input(f'', value=random.uniform(0, 1))
        inputs.append(random_value)

# Button to generate a random number
if st.button('Generate'):
    random_value = random.uniform(0, 1)

# Make predictions
if st.button('Predict'):
    # Collect the input features into a NumPy array
    input_features = np.array([inputs])

    # Use the loaded model to make predictions
    prediction = model.predict(input_features)
    st.header("Prediction:")
    if prediction == 1:
        st.subheader("THIS COMPANY IS GOING TO BE CLOSED..SOON")
    else:
        st.subheader("THIS COMPANY IS HAVING GOOD FINANCIAL HEALTH")

