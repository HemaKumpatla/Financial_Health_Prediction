# -*- coding: utf-8 -*-
"""deploy_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OtbeSTR9xgpEz5ShlvjRqO9aEk8eQVLO
"""

import streamlit as st
import pickle
import numpy as np
import random
from PIL import Image

# Load the pickled Logistic Regression model
with open('gradient.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

st.title('FINANCIAL HEALTH PREDICTION')
st.markdown("- prediction of bankruptcy")
st.image('bank.png', caption='Check if your company is going to bankrupt', use_column_width=True)

inputs = []
features = [' Net worth/Assets',
 ' Persistent EPS in the Last Four Seasons',
 ' Debt ratio %',
 ' ROA(C) before interest and depreciation before interest',
 ' ROA(B) before interest and depreciation after tax',
 ' Borrowing dependency',
 ' Net profit before tax/Paid-in capital',
 ' Quick Ratio',
 ' Net Income to Total Assets',
 ' Equity to Liability',
 ' Retained Earnings to Total Assets',
 ' ROA(A) before interest and % after tax',
 ' Net Value Per Share (C)',
 ' Tax rate (A)',
 ' Total debt/Total net worth',
 ' Net Value Per Share (A)',
 ' Net Value Per Share (B)',
 ' Per Share Net profit before tax (Yuan ¥)']

# Create a layout with two columns for each input
for i in range(0, 18):  # 18 input fields
    left_column, right_column = st.columns(2)

    # Input field for the generated random number between 0 and 1
    with left_column:
        # random_value = st.number_input(f'Feature :{i}', value= 0.00)
        random_value = st.number_input(f'{features[i]}:', value=random.uniform(0, 1))
        inputs.append(random_value)

    # Button to generate a random number
if st.button('Generate'):
    random_value = random.uniform(0, 1)
    # with right_column:
    #     if st.button(f'Generate {i}'):
    #         random_value = random.uniform(0, 1)
# Make predictions
if st.button('Predict'):
    # Collect the input features into a NumPy array
    input_features = np.array([inputs])

    # Use the loaded model to make predictions
    prediction = model.predict(input_features)
    st.header("Prediction:")
    if prediction == 1:
      st.subheader("THIS COMPANY IS GOING TO BE CLOSED..SOON")
    else:
      st.subheader("THIS COMPANY IS HAVING GOOD FINANCIAL HEALTH")

# import streamlit as st
# import pickle
# import numpy as np

# # Load the pickled Gradient Boosting model
# with open('gradient.pkl', 'rb') as model_file:
#     model = pickle.load(model_file)

# st.title('FINANCIAL HEALTH PREDICTION')
# st.markdown("- prediction of bankruptcy")
# st.image('bank.png', caption='Image Caption', use_column_width=True)

# inputs = []
# features = [' Net worth/Assets',
#  ' Persistent EPS in the Last Four Seasons',
#  ' Debt ratio %',
#  ' ROA(C) before interest and depreciation before interest',
#  ' ROA(B) before interest and depreciation after tax',
#  ' Borrowing dependency',
#  ' Net profit before tax/Paid-in capital',
#  ' Quick Ratio',
#  ' Net Income to Total Assets',
#  ' Equity to Liability',
#  ' Retained Earnings to Total Assets',
#  ' ROA(A) before interest and % after tax',
#  ' Net Value Per Share (C)',
#  ' Tax rate (A)',
#  ' Total debt/Total net worth',
#  ' Net Value Per Share (A)',
#  ' Net Value Per Share (B)',
#  ' Per Share Net profit before tax (Yuan ¥)']

# # User input for features (modify as per your model's input requirements)
# for i in range(0,18):
#   feature = st.number_input(f'Feature: {features[i]}', value=0.0)
#   inputs.append(feature)
#   # feature2 = st.number_input('Feature 2:', value=0.0)
#   # feature3 = st.number_input('Feature 3:', value=0.0)
#   # feature4 = st.number_input('Feature 4:', value=0.0)
#   # feature5 = st.number_input('Feature 5:', value=0.0)
#   # feature6 = st.number_input('Feature 6:', value=0.0)
#   # feature7 = st.number_input('Feature 7:', value=0.0)
#   # feature8 = st.number_input('Feature 8:', value=0.0)
#   # feature9 = st.number_input('Feature 9:', value=0.0)
#   # feature10 = st.number_input('Feature 10:', value=0.0)
#   # feature11 = st.number_input('Feature 11:', value=0.0)
#   # feature12 = st.number_input('Feature 12:', value=0.0)
#   # feature13 = st.number_input('Feature 13:', value=0.0)
#   # feature14 = st.number_input('Feature 14:', value=0.0)
#   # feature15 = st.number_input('Feature 15:', value=0.0)
#   # feature16 = st.number_input('Feature 16:', value=0.0)
#   # feature17 = st.number_input('Feature 17:', value=0.0)
#   # feature18 = st.number_input('Feature 18:', value=0.0)
#   # feature19 = st.number_input('Feature 19:', value=0.0)

# if st.button('Predict'):
#     # Collect the input features into a NumPy array
#     input_features = np.array([inputs])

#     # Use the loaded model to make predictions
#     prediction = model.predict(input_features)
#     st.header("Prediction:")
#     if prediction == 0:
#       st.subheader("THIS COMPANY IS GOING TO BE CLOSED..SOON")
#     else:
#       st.subheader("THIS COMPANY IS HAVING GOOD FINANCIAL HEALTH")

